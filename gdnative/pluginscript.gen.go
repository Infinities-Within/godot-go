package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "types.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
#cgo CFLAGS: -I../godot_headers
#include "gdnative.gen.h"
// #include <godot_headers/pluginscript/godot_pluginscript.h>
// Include all headers for now. TODO: Look up all the required
// headers we need to import based on the method arguments and return types.
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
*/
import "C"



	
		// NewEmptyPluginscriptInstanceData will return a pointer to an empty
		// initialized PluginscriptInstanceData. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptInstanceData() Pointer {
			var obj C.godot_pluginscript_instance_data
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptInstanceData will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptInstanceData(obj PluginscriptInstanceData) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptInstanceDataFromPointer will return a PluginscriptInstanceData from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptInstanceDataFromPointer(ptr Pointer) PluginscriptInstanceData {
			
			return PluginscriptInstanceData{base: (*C.godot_pluginscript_instance_data)(ptr.getBase())}
				}

		
		
			type PluginscriptInstanceData struct {
				base *C.godot_pluginscript_instance_data
				
				}

			func (gdt PluginscriptInstanceData) getBase() *C.godot_pluginscript_instance_data {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptScriptData will return a pointer to an empty
		// initialized PluginscriptScriptData. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptScriptData() Pointer {
			var obj C.godot_pluginscript_script_data
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptScriptData will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptScriptData(obj PluginscriptScriptData) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptScriptDataFromPointer will return a PluginscriptScriptData from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptScriptDataFromPointer(ptr Pointer) PluginscriptScriptData {
			
			return PluginscriptScriptData{base: (*C.godot_pluginscript_script_data)(ptr.getBase())}
				}

		
		
			type PluginscriptScriptData struct {
				base *C.godot_pluginscript_script_data
				
				}

			func (gdt PluginscriptScriptData) getBase() *C.godot_pluginscript_script_data {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptLanguageData will return a pointer to an empty
		// initialized PluginscriptLanguageData. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptLanguageData() Pointer {
			var obj C.godot_pluginscript_language_data
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptLanguageData will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptLanguageData(obj PluginscriptLanguageData) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptLanguageDataFromPointer will return a PluginscriptLanguageData from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptLanguageDataFromPointer(ptr Pointer) PluginscriptLanguageData {
			
			return PluginscriptLanguageData{base: (*C.godot_pluginscript_language_data)(ptr.getBase())}
				}

		
		
			type PluginscriptLanguageData struct {
				base *C.godot_pluginscript_language_data
				
				}

			func (gdt PluginscriptLanguageData) getBase() *C.godot_pluginscript_language_data {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptInstanceDesc will return a pointer to an empty
		// initialized PluginscriptInstanceDesc. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptInstanceDesc() Pointer {
			var obj C.godot_pluginscript_instance_desc
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptInstanceDesc will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptInstanceDesc(obj PluginscriptInstanceDesc) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptInstanceDescFromPointer will return a PluginscriptInstanceDesc from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptInstanceDescFromPointer(ptr Pointer) PluginscriptInstanceDesc {
			
			return PluginscriptInstanceDesc{base: (*C.godot_pluginscript_instance_desc)(ptr.getBase())}
				}

		
		
			type PluginscriptInstanceDesc struct {
				base *C.godot_pluginscript_instance_desc
				
				}

			func (gdt PluginscriptInstanceDesc) getBase() *C.godot_pluginscript_instance_desc {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmpty<Int>} will return a pointer to an empty
		// initialized <Int>}. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmpty<Int>}() Pointer {
			var obj C.<int>}
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFrom<Int>} will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFrom<Int>}(obj <Int>}) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// New<Int>}FromPointer will return a <Int>} from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func New<Int>}FromPointer(ptr Pointer) <Int>} {
			
			return <Int>}{base: (*C.<int>})(ptr.getBase())}
				}

		
		
			type <Int>} struct {
				base *C.<int>}
				
				Name StringName
						IsTool Bool
						Base StringName
						}

			func (gdt <Int>}) getBase() *C.<int>} {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptScriptDesc will return a pointer to an empty
		// initialized PluginscriptScriptDesc. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptScriptDesc() Pointer {
			var obj C.godot_pluginscript_script_desc
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptScriptDesc will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptScriptDesc(obj PluginscriptScriptDesc) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptScriptDescFromPointer will return a PluginscriptScriptDesc from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptScriptDescFromPointer(ptr Pointer) PluginscriptScriptDesc {
			
			return PluginscriptScriptDesc{base: (*C.godot_pluginscript_script_desc)(ptr.getBase())}
				}

		
		
			type PluginscriptScriptDesc struct {
				base *C.godot_pluginscript_script_desc
				
				InstanceDesc PluginscriptInstanceDesc
						}

			func (gdt PluginscriptScriptDesc) getBase() *C.godot_pluginscript_script_desc {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptProfilingData will return a pointer to an empty
		// initialized PluginscriptProfilingData. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptProfilingData() Pointer {
			var obj C.godot_pluginscript_profiling_data
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptProfilingData will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptProfilingData(obj PluginscriptProfilingData) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptProfilingDataFromPointer will return a PluginscriptProfilingData from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptProfilingDataFromPointer(ptr Pointer) PluginscriptProfilingData {
			
			return PluginscriptProfilingData{base: (*C.godot_pluginscript_profiling_data)(ptr.getBase())}
				}

		
		
			type PluginscriptProfilingData struct {
				base *C.godot_pluginscript_profiling_data
				
				Signature StringName
						CallCount Int
						TotalTime Int
						SelfTime Int
						}

			func (gdt PluginscriptProfilingData) getBase() *C.godot_pluginscript_profiling_data {
				return gdt.base
			}
		

		
		

	

	
	

	
	

	
		// NewEmptyPluginscriptLanguageDesc will return a pointer to an empty
		// initialized PluginscriptLanguageDesc. This is primarily used in
		// conjunction with MethodBindPtrCall.
		func NewEmptyPluginscriptLanguageDesc() Pointer {
			var obj C.godot_pluginscript_language_desc
			return Pointer{base: unsafe.Pointer(&obj)}
		}

		// NewPointerFromPluginscriptLanguageDesc will return an unsafe pointer to the given
		// object. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPointerFromPluginscriptLanguageDesc(obj PluginscriptLanguageDesc) Pointer {
			return Pointer{base: unsafe.Pointer(obj.getBase())}
		}

		// NewPluginscriptLanguageDescFromPointer will return a PluginscriptLanguageDesc from the
		// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
		func NewPluginscriptLanguageDescFromPointer(ptr Pointer) PluginscriptLanguageDesc {
			
			return PluginscriptLanguageDesc{base: (*C.godot_pluginscript_language_desc)(ptr.getBase())}
				}

		
		
			type PluginscriptLanguageDesc struct {
				base *C.godot_pluginscript_language_desc
				
				HasNamedClasses Bool
						SupportsBuiltinMode Bool
						ScriptDesc PluginscriptScriptDesc
						}

			func (gdt PluginscriptLanguageDesc) getBase() *C.godot_pluginscript_language_desc {
				return gdt.base
			}
		

		
		

	

	
	

	
	

