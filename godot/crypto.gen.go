package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCryptoFromPointer(ptr gdnative.Pointer) Crypto {
func newCryptoFromPointer(ptr gdnative.Pointer) Crypto {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Crypto{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type Crypto struct {
	Reference
	owner gdnative.Object
}

func (o *Crypto) BaseClass() string {
	return "Crypto"
}

/*
        Undocumented
	Args: [{ false size int}], Returns: PoolByteArray
*/
func (o *Crypto) GenerateRandomBytes(size gdnative.Int) gdnative.PoolByteArray {
	//log.Println("Calling Crypto.GenerateRandomBytes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Crypto", "generate_random_bytes")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false size int}], Returns: CryptoKey
*/
func (o *Crypto) GenerateRsa(size gdnative.Int) CryptoKeyImplementer {
	//log.Println("Calling Crypto.GenerateRsa()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Crypto", "generate_rsa")

	// Call the parent method.
	// CryptoKey
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCryptoKeyFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CryptoKeyImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "CryptoKey" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CryptoKeyImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false key CryptoKey} {CN=myserver,O=myorganisation,C=IT true issuer_name String} {20140101000000 true not_before String} {20340101000000 true not_after String}], Returns: X509Certificate
*/
func (o *Crypto) GenerateSelfSignedCertificate(key CryptoKeyImplementer, issuerName gdnative.String, notBefore gdnative.String, notAfter gdnative.String) X509CertificateImplementer {
	//log.Println("Calling Crypto.GenerateSelfSignedCertificate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(key.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(issuerName)
	ptrArguments[2] = gdnative.NewPointerFromString(notBefore)
	ptrArguments[3] = gdnative.NewPointerFromString(notAfter)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Crypto", "generate_self_signed_certificate")

	// Call the parent method.
	// X509Certificate
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newX509CertificateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(X509CertificateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "X509Certificate" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(X509CertificateImplementer)
	}

	return &ret
}

// CryptoImplementer is an interface that implements the methods
// of the Crypto class.
type CryptoImplementer interface {
	ReferenceImplementer
	GenerateRandomBytes(size gdnative.Int) gdnative.PoolByteArray
	GenerateRsa(size gdnative.Int) CryptoKeyImplementer
	GenerateSelfSignedCertificate(key CryptoKeyImplementer, issuerName gdnative.String, notBefore gdnative.String, notAfter gdnative.String) X509CertificateImplementer
}
