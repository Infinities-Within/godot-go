package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorVCSInterfaceFromPointer(ptr gdnative.Pointer) EditorVCSInterface {
func newEditorVCSInterfaceFromPointer(ptr gdnative.Pointer) EditorVCSInterface {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorVCSInterface{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type EditorVCSInterface struct {
	Object
	owner gdnative.Object
}

func (o *EditorVCSInterface) BaseClass() string {
	return "EditorVCSInterface"
}

/*
        Undocumented
	Args: [{ false msg String}], Returns: void
*/
func (o *EditorVCSInterface) X_Commit(msg gdnative.String) {
	//log.Println("Calling EditorVCSInterface.X_Commit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(msg)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_commit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: Array
*/
func (o *EditorVCSInterface) X_GetFileDiff(filePath gdnative.String) gdnative.Array {
	//log.Println("Calling EditorVCSInterface.X_GetFileDiff()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_file_diff")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *EditorVCSInterface) X_GetModifiedFilesData() gdnative.Dictionary {
	//log.Println("Calling EditorVCSInterface.X_GetModifiedFilesData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_modified_files_data")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) X_GetProjectName() gdnative.String {
	//log.Println("Calling EditorVCSInterface.X_GetProjectName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_project_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) X_GetVcsName() gdnative.String {
	//log.Println("Calling EditorVCSInterface.X_GetVcsName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_get_vcs_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false project_root_path String}], Returns: bool
*/
func (o *EditorVCSInterface) X_Initialize(projectRootPath gdnative.String) gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.X_Initialize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(projectRootPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_initialize")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) X_IsVcsInitialized() gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.X_IsVcsInitialized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_is_vcs_initialized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) X_ShutDown() gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.X_ShutDown()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_shut_down")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) X_StageFile(filePath gdnative.String) {
	//log.Println("Calling EditorVCSInterface.X_StageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_stage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) X_UnstageFile(filePath gdnative.String) {
	//log.Println("Calling EditorVCSInterface.X_UnstageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "_unstage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false msg String}], Returns: void
*/
func (o *EditorVCSInterface) Commit(msg gdnative.String) {
	//log.Println("Calling EditorVCSInterface.Commit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(msg)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "commit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: Array
*/
func (o *EditorVCSInterface) GetFileDiff(filePath gdnative.String) gdnative.Array {
	//log.Println("Calling EditorVCSInterface.GetFileDiff()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_file_diff")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *EditorVCSInterface) GetModifiedFilesData() gdnative.Dictionary {
	//log.Println("Calling EditorVCSInterface.GetModifiedFilesData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_modified_files_data")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) GetProjectName() gdnative.String {
	//log.Println("Calling EditorVCSInterface.GetProjectName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_project_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *EditorVCSInterface) GetVcsName() gdnative.String {
	//log.Println("Calling EditorVCSInterface.GetVcsName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "get_vcs_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false project_root_path String}], Returns: bool
*/
func (o *EditorVCSInterface) Initialize(projectRootPath gdnative.String) gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.Initialize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(projectRootPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "initialize")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) IsAddonReady() gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.IsAddonReady()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "is_addon_ready")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) IsVcsInitialized() gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.IsVcsInitialized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "is_vcs_initialized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *EditorVCSInterface) ShutDown() gdnative.Bool {
	//log.Println("Calling EditorVCSInterface.ShutDown()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "shut_down")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) StageFile(filePath gdnative.String) {
	//log.Println("Calling EditorVCSInterface.StageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "stage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file_path String}], Returns: void
*/
func (o *EditorVCSInterface) UnstageFile(filePath gdnative.String) {
	//log.Println("Calling EditorVCSInterface.UnstageFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorVCSInterface", "unstage_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// EditorVCSInterfaceImplementer is an interface that implements the methods
// of the EditorVCSInterface class.
type EditorVCSInterfaceImplementer interface {
	ObjectImplementer
	X_Commit(msg gdnative.String)
	X_GetFileDiff(filePath gdnative.String) gdnative.Array
	X_GetModifiedFilesData() gdnative.Dictionary
	X_GetProjectName() gdnative.String
	X_GetVcsName() gdnative.String
	X_Initialize(projectRootPath gdnative.String) gdnative.Bool
	X_IsVcsInitialized() gdnative.Bool
	X_ShutDown() gdnative.Bool
	X_StageFile(filePath gdnative.String)
	X_UnstageFile(filePath gdnative.String)
	Commit(msg gdnative.String)
	GetFileDiff(filePath gdnative.String) gdnative.Array
	GetModifiedFilesData() gdnative.Dictionary
	GetProjectName() gdnative.String
	GetVcsName() gdnative.String
	Initialize(projectRootPath gdnative.String) gdnative.Bool
	IsAddonReady() gdnative.Bool
	IsVcsInitialized() gdnative.Bool
	ShutDown() gdnative.Bool
	StageFile(filePath gdnative.String)
	UnstageFile(filePath gdnative.String)
}
