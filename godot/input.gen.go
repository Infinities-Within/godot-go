package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// InputCursorShape is an enum for CursorShape values.
type InputCursorShape int

const (
	InputCursorArrow        InputCursorShape = 0
	InputCursorBdiagsize    InputCursorShape = 11
	InputCursorBusy         InputCursorShape = 5
	InputCursorCanDrop      InputCursorShape = 7
	InputCursorCross        InputCursorShape = 3
	InputCursorDrag         InputCursorShape = 6
	InputCursorFdiagsize    InputCursorShape = 12
	InputCursorForbidden    InputCursorShape = 8
	InputCursorHelp         InputCursorShape = 16
	InputCursorHsize        InputCursorShape = 10
	InputCursorHsplit       InputCursorShape = 15
	InputCursorIbeam        InputCursorShape = 1
	InputCursorMove         InputCursorShape = 13
	InputCursorPointingHand InputCursorShape = 2
	InputCursorVsize        InputCursorShape = 9
	InputCursorVsplit       InputCursorShape = 14
	InputCursorWait         InputCursorShape = 4
)

// InputMouseMode is an enum for MouseMode values.
type InputMouseMode int

const (
	InputMouseModeCaptured InputMouseMode = 2
	InputMouseModeConfined InputMouseMode = 3
	InputMouseModeHidden   InputMouseMode = 1
	InputMouseModeVisible  InputMouseMode = 0
)

//func NewinputFromPointer(ptr gdnative.Pointer) input {
func newInputFromPointer(ptr gdnative.Pointer) input {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := input{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonInput() *input {
	return &input{}
}

/*
   Undocumented
*/
var Input = newSingletonInput()

/*
Undocumented
*/
type input struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *input) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("Input")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *input) BaseClass() string {
	return "Input"
}

/*
        Undocumented
	Args: [{ false action String} {1 true strength float}], Returns: void
*/
func (o *input) ActionPress(action gdnative.String, strength gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Input.ActionPress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(action)
	ptrArguments[1] = gdnative.NewPointerFromReal(strength)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "action_press")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false action String}], Returns: void
*/
func (o *input) ActionRelease(action gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling Input.ActionRelease()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "action_release")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mapping String} {False true update_existing bool}], Returns: void
*/
func (o *input) AddJoyMapping(mapping gdnative.String, updateExisting gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Input.AddJoyMapping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(mapping)
	ptrArguments[1] = gdnative.NewPointerFromBool(updateExisting)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "add_joy_mapping")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *input) GetAccelerometer() gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetAccelerometer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_accelerometer")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false action String}], Returns: float
*/
func (o *input) GetActionStrength(action gdnative.String) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Input.GetActionStrength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_action_strength")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *input) GetConnectedJoypads() gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling Input.GetConnectedJoypads()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_connected_joypads")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Input::CursorShape
*/
func (o *input) GetCurrentCursorShape() InputCursorShape {
	o.ensureSingleton()
	//log.Println("Calling Input.GetCurrentCursorShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_current_cursor_shape")

	// Call the parent method.
	// enum.Input::CursorShape
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return InputCursorShape(ret)
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *input) GetGravity() gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_gravity")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *input) GetGyroscope() gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetGyroscope()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_gyroscope")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int} { false axis int}], Returns: float
*/
func (o *input) GetJoyAxis(device gdnative.Int, axis gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyAxis()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_axis")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false axis String}], Returns: int
*/
func (o *input) GetJoyAxisIndexFromString(axis gdnative.String) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyAxisIndexFromString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_axis_index_from_string")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false axis_index int}], Returns: String
*/
func (o *input) GetJoyAxisString(axisIndex gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyAxisString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(axisIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_axis_string")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false button String}], Returns: int
*/
func (o *input) GetJoyButtonIndexFromString(button gdnative.String) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyButtonIndexFromString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(button)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_button_index_from_string")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false button_index int}], Returns: String
*/
func (o *input) GetJoyButtonString(buttonIndex gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyButtonString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(buttonIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_button_string")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int}], Returns: String
*/
func (o *input) GetJoyGuid(device gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyGuid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_guid")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int}], Returns: String
*/
func (o *input) GetJoyName(device gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int}], Returns: float
*/
func (o *input) GetJoyVibrationDuration(device gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyVibrationDuration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_vibration_duration")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int}], Returns: Vector2
*/
func (o *input) GetJoyVibrationStrength(device gdnative.Int) gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetJoyVibrationStrength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_joy_vibration_strength")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *input) GetLastMouseSpeed() gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetLastMouseSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_last_mouse_speed")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *input) GetMagnetometer() gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling Input.GetMagnetometer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_magnetometer")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *input) GetMouseButtonMask() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Input.GetMouseButtonMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_mouse_button_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Input::MouseMode
*/
func (o *input) GetMouseMode() InputMouseMode {
	o.ensureSingleton()
	//log.Println("Calling Input.GetMouseMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "get_mouse_mode")

	// Call the parent method.
	// enum.Input::MouseMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return InputMouseMode(ret)
}

/*
        Undocumented
	Args: [{ false action String}], Returns: bool
*/
func (o *input) IsActionJustPressed(action gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsActionJustPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_action_just_pressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false action String}], Returns: bool
*/
func (o *input) IsActionJustReleased(action gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsActionJustReleased()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_action_just_released")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false action String}], Returns: bool
*/
func (o *input) IsActionPressed(action gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsActionPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_action_pressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int} { false button int}], Returns: bool
*/
func (o *input) IsJoyButtonPressed(device gdnative.Int, button gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsJoyButtonPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)
	ptrArguments[1] = gdnative.NewPointerFromInt(button)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_joy_button_pressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int}], Returns: bool
*/
func (o *input) IsJoyKnown(device gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsJoyKnown()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_joy_known")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false scancode int}], Returns: bool
*/
func (o *input) IsKeyPressed(scancode gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsKeyPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(scancode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_key_pressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false button int}], Returns: bool
*/
func (o *input) IsMouseButtonPressed(button gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Input.IsMouseButtonPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(button)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "is_mouse_button_pressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false device int} { false connected bool} { false name String} { false guid String}], Returns: void
*/
func (o *input) JoyConnectionChanged(device gdnative.Int, connected gdnative.Bool, name gdnative.String, guid gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling Input.JoyConnectionChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)
	ptrArguments[1] = gdnative.NewPointerFromBool(connected)
	ptrArguments[2] = gdnative.NewPointerFromString(name)
	ptrArguments[3] = gdnative.NewPointerFromString(guid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "joy_connection_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false event InputEvent}], Returns: void
*/
func (o *input) ParseInputEvent(event InputEventImplementer) {
	o.ensureSingleton()
	//log.Println("Calling Input.ParseInputEvent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "parse_input_event")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false guid String}], Returns: void
*/
func (o *input) RemoveJoyMapping(guid gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling Input.RemoveJoyMapping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(guid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "remove_joy_mapping")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false image Resource} {0 true shape int} {(0, 0) true hotspot Vector2}], Returns: void
*/
func (o *input) SetCustomMouseCursor(image ResourceImplementer, shape gdnative.Int, hotspot gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Input.SetCustomMouseCursor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(image.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(shape)
	ptrArguments[2] = gdnative.NewPointerFromVector2(hotspot)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "set_custom_mouse_cursor")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{0 true shape int}], Returns: void
*/
func (o *input) SetDefaultCursorShape(shape gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Input.SetDefaultCursorShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "set_default_cursor_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *input) SetMouseMode(mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Input.SetMouseMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "set_mouse_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *input) SetUseAccumulatedInput(enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Input.SetUseAccumulatedInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "set_use_accumulated_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false device int} { false weak_magnitude float} { false strong_magnitude float} {0 true duration float}], Returns: void
*/
func (o *input) StartJoyVibration(device gdnative.Int, weakMagnitude gdnative.Real, strongMagnitude gdnative.Real, duration gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Input.StartJoyVibration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)
	ptrArguments[1] = gdnative.NewPointerFromReal(weakMagnitude)
	ptrArguments[2] = gdnative.NewPointerFromReal(strongMagnitude)
	ptrArguments[3] = gdnative.NewPointerFromReal(duration)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "start_joy_vibration")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false device int}], Returns: void
*/
func (o *input) StopJoyVibration(device gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Input.StopJoyVibration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(device)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "stop_joy_vibration")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{500 true duration_ms int}], Returns: void
*/
func (o *input) VibrateHandheld(durationMs gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Input.VibrateHandheld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(durationMs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "vibrate_handheld")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false to Vector2}], Returns: void
*/
func (o *input) WarpMousePosition(to gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Input.WarpMousePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(to)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Input", "warp_mouse_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// InputImplementer is an interface that implements the methods
// of the Input class.
type InputImplementer interface {
	ObjectImplementer
	ActionPress(action gdnative.String, strength gdnative.Real)
	ActionRelease(action gdnative.String)
	AddJoyMapping(mapping gdnative.String, updateExisting gdnative.Bool)
	GetAccelerometer() gdnative.Vector3
	GetActionStrength(action gdnative.String) gdnative.Real
	GetConnectedJoypads() gdnative.Array
	GetGravity() gdnative.Vector3
	GetGyroscope() gdnative.Vector3
	GetJoyAxis(device gdnative.Int, axis gdnative.Int) gdnative.Real
	GetJoyAxisIndexFromString(axis gdnative.String) gdnative.Int
	GetJoyAxisString(axisIndex gdnative.Int) gdnative.String
	GetJoyButtonIndexFromString(button gdnative.String) gdnative.Int
	GetJoyButtonString(buttonIndex gdnative.Int) gdnative.String
	GetJoyGuid(device gdnative.Int) gdnative.String
	GetJoyName(device gdnative.Int) gdnative.String
	GetJoyVibrationDuration(device gdnative.Int) gdnative.Real
	GetJoyVibrationStrength(device gdnative.Int) gdnative.Vector2
	GetLastMouseSpeed() gdnative.Vector2
	GetMagnetometer() gdnative.Vector3
	GetMouseButtonMask() gdnative.Int
	IsActionJustPressed(action gdnative.String) gdnative.Bool
	IsActionJustReleased(action gdnative.String) gdnative.Bool
	IsActionPressed(action gdnative.String) gdnative.Bool
	IsJoyButtonPressed(device gdnative.Int, button gdnative.Int) gdnative.Bool
	IsJoyKnown(device gdnative.Int) gdnative.Bool
	IsKeyPressed(scancode gdnative.Int) gdnative.Bool
	IsMouseButtonPressed(button gdnative.Int) gdnative.Bool
	JoyConnectionChanged(device gdnative.Int, connected gdnative.Bool, name gdnative.String, guid gdnative.String)
	ParseInputEvent(event InputEventImplementer)
	RemoveJoyMapping(guid gdnative.String)
	SetCustomMouseCursor(image ResourceImplementer, shape gdnative.Int, hotspot gdnative.Vector2)
	SetDefaultCursorShape(shape gdnative.Int)
	SetMouseMode(mode gdnative.Int)
	SetUseAccumulatedInput(enable gdnative.Bool)
	StartJoyVibration(device gdnative.Int, weakMagnitude gdnative.Real, strongMagnitude gdnative.Real, duration gdnative.Real)
	StopJoyVibration(device gdnative.Int)
	VibrateHandheld(durationMs gdnative.Int)
	WarpMousePosition(to gdnative.Vector2)
}
