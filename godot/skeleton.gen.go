package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSkeletonFromPointer(ptr gdnative.Pointer) Skeleton {
func newSkeletonFromPointer(ptr gdnative.Pointer) Skeleton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Skeleton{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type Skeleton struct {
	Spatial
	owner gdnative.Object
}

func (o *Skeleton) BaseClass() string {
	return "Skeleton"
}

/*
        Undocumented
	Args: [{ false name String}], Returns: void
*/
func (o *Skeleton) AddBone(name gdnative.String) {
	//log.Println("Calling Skeleton.AddBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "add_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false node Node}], Returns: void
*/
func (o *Skeleton) BindChildNodeToBone(boneIdx gdnative.Int, node NodeImplementer) {
	//log.Println("Calling Skeleton.BindChildNodeToBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "bind_child_node_to_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Skeleton) ClearBones() {
	//log.Println("Calling Skeleton.ClearBones()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "clear_bones")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: int
*/
func (o *Skeleton) FindBone(name gdnative.String) gdnative.Int {
	//log.Println("Calling Skeleton.FindBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "find_bone")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Skeleton) GetBoneCount() gdnative.Int {
	//log.Println("Calling Skeleton.GetBoneCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneCustomPose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneCustomPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_custom_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneGlobalPose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneGlobalPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_global_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: String
*/
func (o *Skeleton) GetBoneName(boneIdx gdnative.Int) gdnative.String {
	//log.Println("Calling Skeleton.GetBoneName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: int
*/
func (o *Skeleton) GetBoneParent(boneIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling Skeleton.GetBoneParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_parent")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBonePose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBonePose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneRest(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_rest")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: Array
*/
func (o *Skeleton) GetBoundChildNodesToBone(boneIdx gdnative.Int) gdnative.Array {
	//log.Println("Calling Skeleton.GetBoundChildNodesToBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bound_child_nodes_to_bone")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: bool
*/
func (o *Skeleton) IsBoneRestDisabled(boneIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling Skeleton.IsBoneRestDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "is_bone_rest_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Skeleton) LocalizeRests() {
	//log.Println("Calling Skeleton.LocalizeRests()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "localize_rests")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false exception RID}], Returns: void
*/
func (o *Skeleton) PhysicalBonesAddCollisionException(exception gdnative.Rid) {
	//log.Println("Calling Skeleton.PhysicalBonesAddCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(exception)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_add_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false exception RID}], Returns: void
*/
func (o *Skeleton) PhysicalBonesRemoveCollisionException(exception gdnative.Rid) {
	//log.Println("Calling Skeleton.PhysicalBonesRemoveCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(exception)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_remove_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{[] true bones Array}], Returns: void
*/
func (o *Skeleton) PhysicalBonesStartSimulation(bones gdnative.Array) {
	//log.Println("Calling Skeleton.PhysicalBonesStartSimulation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(bones)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_start_simulation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Skeleton) PhysicalBonesStopSimulation() {
	//log.Println("Calling Skeleton.PhysicalBonesStopSimulation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_stop_simulation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false skin Skin}], Returns: SkinReference
*/
func (o *Skeleton) RegisterSkin(skin SkinImplementer) SkinReferenceImplementer {
	//log.Println("Calling Skeleton.RegisterSkin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(skin.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "register_skin")

	// Call the parent method.
	// SkinReference
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newSkinReferenceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(SkinReferenceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "SkinReference" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(SkinReferenceImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false bone_idx int} { false custom_pose Transform}], Returns: void
*/
func (o *Skeleton) SetBoneCustomPose(boneIdx gdnative.Int, customPose gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBoneCustomPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(customPose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_custom_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false disable bool}], Returns: void
*/
func (o *Skeleton) SetBoneDisableRest(boneIdx gdnative.Int, disable gdnative.Bool) {
	//log.Println("Calling Skeleton.SetBoneDisableRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_disable_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false pose Transform} { false amount float} {False true persistent bool}], Returns: void
*/
func (o *Skeleton) SetBoneGlobalPoseOverride(boneIdx gdnative.Int, pose gdnative.Transform, amount gdnative.Real, persistent gdnative.Bool) {
	//log.Println("Calling Skeleton.SetBoneGlobalPoseOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)
	ptrArguments[2] = gdnative.NewPointerFromReal(amount)
	ptrArguments[3] = gdnative.NewPointerFromBool(persistent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_global_pose_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false parent_idx int}], Returns: void
*/
func (o *Skeleton) SetBoneParent(boneIdx gdnative.Int, parentIdx gdnative.Int) {
	//log.Println("Calling Skeleton.SetBoneParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromInt(parentIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false pose Transform}], Returns: void
*/
func (o *Skeleton) SetBonePose(boneIdx gdnative.Int, pose gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBonePose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false rest Transform}], Returns: void
*/
func (o *Skeleton) SetBoneRest(boneIdx gdnative.Int, rest gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBoneRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(rest)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int} { false node Node}], Returns: void
*/
func (o *Skeleton) UnbindChildNodeFromBone(boneIdx gdnative.Int, node NodeImplementer) {
	//log.Println("Calling Skeleton.UnbindChildNodeFromBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "unbind_child_node_from_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bone_idx int}], Returns: void
*/
func (o *Skeleton) UnparentBoneAndRest(boneIdx gdnative.Int) {
	//log.Println("Calling Skeleton.UnparentBoneAndRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "unparent_bone_and_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SkeletonImplementer is an interface that implements the methods
// of the Skeleton class.
type SkeletonImplementer interface {
	SpatialImplementer
	AddBone(name gdnative.String)
	BindChildNodeToBone(boneIdx gdnative.Int, node NodeImplementer)
	ClearBones()
	FindBone(name gdnative.String) gdnative.Int
	GetBoneCount() gdnative.Int
	GetBoneCustomPose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneGlobalPose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneName(boneIdx gdnative.Int) gdnative.String
	GetBoneParent(boneIdx gdnative.Int) gdnative.Int
	GetBonePose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneRest(boneIdx gdnative.Int) gdnative.Transform
	GetBoundChildNodesToBone(boneIdx gdnative.Int) gdnative.Array
	IsBoneRestDisabled(boneIdx gdnative.Int) gdnative.Bool
	LocalizeRests()
	PhysicalBonesAddCollisionException(exception gdnative.Rid)
	PhysicalBonesRemoveCollisionException(exception gdnative.Rid)
	PhysicalBonesStartSimulation(bones gdnative.Array)
	PhysicalBonesStopSimulation()
	RegisterSkin(skin SkinImplementer) SkinReferenceImplementer
	SetBoneCustomPose(boneIdx gdnative.Int, customPose gdnative.Transform)
	SetBoneDisableRest(boneIdx gdnative.Int, disable gdnative.Bool)
	SetBoneGlobalPoseOverride(boneIdx gdnative.Int, pose gdnative.Transform, amount gdnative.Real, persistent gdnative.Bool)
	SetBoneParent(boneIdx gdnative.Int, parentIdx gdnative.Int)
	SetBonePose(boneIdx gdnative.Int, pose gdnative.Transform)
	SetBoneRest(boneIdx gdnative.Int, rest gdnative.Transform)
	UnbindChildNodeFromBone(boneIdx gdnative.Int, node NodeImplementer)
	UnparentBoneAndRest(boneIdx gdnative.Int)
}
