package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewAStar2DFromPointer(ptr gdnative.Pointer) AStar2D {
func newAStar2DFromPointer(ptr gdnative.Pointer) AStar2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AStar2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type AStar2D struct {
	Reference
	owner gdnative.Object
}

func (o *AStar2D) BaseClass() string {
	return "AStar2D"
}

/*
        Undocumented
	Args: [{ false id int} { false position Vector2} {1 true weight_scale float}], Returns: void
*/
func (o *AStar2D) AddPoint(id gdnative.Int, position gdnative.Vector2, weightScale gdnative.Real) {
	//log.Println("Calling AStar2D.AddPoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)
	ptrArguments[2] = gdnative.NewPointerFromReal(weightScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "add_point")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} { false to_id int}], Returns: bool
*/
func (o *AStar2D) ArePointsConnected(id gdnative.Int, toId gdnative.Int) gdnative.Bool {
	//log.Println("Calling AStar2D.ArePointsConnected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(toId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "are_points_connected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *AStar2D) Clear() {
	//log.Println("Calling AStar2D.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} { false to_id int} {True true bidirectional bool}], Returns: void
*/
func (o *AStar2D) ConnectPoints(id gdnative.Int, toId gdnative.Int, bidirectional gdnative.Bool) {
	//log.Println("Calling AStar2D.ConnectPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(toId)
	ptrArguments[2] = gdnative.NewPointerFromBool(bidirectional)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "connect_points")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} { false to_id int}], Returns: void
*/
func (o *AStar2D) DisconnectPoints(id gdnative.Int, toId gdnative.Int) {
	//log.Println("Calling AStar2D.DisconnectPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(toId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "disconnect_points")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *AStar2D) GetAvailablePointId() gdnative.Int {
	//log.Println("Calling AStar2D.GetAvailablePointId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_available_point_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false to_position Vector2} {False true include_disabled bool}], Returns: int
*/
func (o *AStar2D) GetClosestPoint(toPosition gdnative.Vector2, includeDisabled gdnative.Bool) gdnative.Int {
	//log.Println("Calling AStar2D.GetClosestPoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(toPosition)
	ptrArguments[1] = gdnative.NewPointerFromBool(includeDisabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_closest_point")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false to_position Vector2}], Returns: Vector2
*/
func (o *AStar2D) GetClosestPositionInSegment(toPosition gdnative.Vector2) gdnative.Vector2 {
	//log.Println("Calling AStar2D.GetClosestPositionInSegment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(toPosition)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_closest_position_in_segment")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from_id int} { false to_id int}], Returns: PoolIntArray
*/
func (o *AStar2D) GetIdPath(fromId gdnative.Int, toId gdnative.Int) gdnative.PoolIntArray {
	//log.Println("Calling AStar2D.GetIdPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromId)
	ptrArguments[1] = gdnative.NewPointerFromInt(toId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_id_path")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *AStar2D) GetPointCapacity() gdnative.Int {
	//log.Println("Calling AStar2D.GetPointCapacity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_capacity")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: PoolIntArray
*/
func (o *AStar2D) GetPointConnections(id gdnative.Int) gdnative.PoolIntArray {
	//log.Println("Calling AStar2D.GetPointConnections()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_connections")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *AStar2D) GetPointCount() gdnative.Int {
	//log.Println("Calling AStar2D.GetPointCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from_id int} { false to_id int}], Returns: PoolVector2Array
*/
func (o *AStar2D) GetPointPath(fromId gdnative.Int, toId gdnative.Int) gdnative.PoolVector2Array {
	//log.Println("Calling AStar2D.GetPointPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromId)
	ptrArguments[1] = gdnative.NewPointerFromInt(toId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_path")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: Vector2
*/
func (o *AStar2D) GetPointPosition(id gdnative.Int) gdnative.Vector2 {
	//log.Println("Calling AStar2D.GetPointPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: float
*/
func (o *AStar2D) GetPointWeightScale(id gdnative.Int) gdnative.Real {
	//log.Println("Calling AStar2D.GetPointWeightScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_point_weight_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *AStar2D) GetPoints() gdnative.Array {
	//log.Println("Calling AStar2D.GetPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "get_points")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: bool
*/
func (o *AStar2D) HasPoint(id gdnative.Int) gdnative.Bool {
	//log.Println("Calling AStar2D.HasPoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "has_point")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: bool
*/
func (o *AStar2D) IsPointDisabled(id gdnative.Int) gdnative.Bool {
	//log.Println("Calling AStar2D.IsPointDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "is_point_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: void
*/
func (o *AStar2D) RemovePoint(id gdnative.Int) {
	//log.Println("Calling AStar2D.RemovePoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "remove_point")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false num_nodes int}], Returns: void
*/
func (o *AStar2D) ReserveSpace(numNodes gdnative.Int) {
	//log.Println("Calling AStar2D.ReserveSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(numNodes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "reserve_space")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} {True true disabled bool}], Returns: void
*/
func (o *AStar2D) SetPointDisabled(id gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling AStar2D.SetPointDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "set_point_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} { false position Vector2}], Returns: void
*/
func (o *AStar2D) SetPointPosition(id gdnative.Int, position gdnative.Vector2) {
	//log.Println("Calling AStar2D.SetPointPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "set_point_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int} { false weight_scale float}], Returns: void
*/
func (o *AStar2D) SetPointWeightScale(id gdnative.Int, weightScale gdnative.Real) {
	//log.Println("Calling AStar2D.SetPointWeightScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(weightScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AStar2D", "set_point_weight_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AStar2DImplementer is an interface that implements the methods
// of the AStar2D class.
type AStar2DImplementer interface {
	ReferenceImplementer
	AddPoint(id gdnative.Int, position gdnative.Vector2, weightScale gdnative.Real)
	ArePointsConnected(id gdnative.Int, toId gdnative.Int) gdnative.Bool
	Clear()
	ConnectPoints(id gdnative.Int, toId gdnative.Int, bidirectional gdnative.Bool)
	DisconnectPoints(id gdnative.Int, toId gdnative.Int)
	GetAvailablePointId() gdnative.Int
	GetClosestPoint(toPosition gdnative.Vector2, includeDisabled gdnative.Bool) gdnative.Int
	GetClosestPositionInSegment(toPosition gdnative.Vector2) gdnative.Vector2
	GetIdPath(fromId gdnative.Int, toId gdnative.Int) gdnative.PoolIntArray
	GetPointCapacity() gdnative.Int
	GetPointConnections(id gdnative.Int) gdnative.PoolIntArray
	GetPointCount() gdnative.Int
	GetPointPath(fromId gdnative.Int, toId gdnative.Int) gdnative.PoolVector2Array
	GetPointPosition(id gdnative.Int) gdnative.Vector2
	GetPointWeightScale(id gdnative.Int) gdnative.Real
	GetPoints() gdnative.Array
	HasPoint(id gdnative.Int) gdnative.Bool
	IsPointDisabled(id gdnative.Int) gdnative.Bool
	RemovePoint(id gdnative.Int)
	ReserveSpace(numNodes gdnative.Int)
	SetPointDisabled(id gdnative.Int, disabled gdnative.Bool)
	SetPointPosition(id gdnative.Int, position gdnative.Vector2)
	SetPointWeightScale(id gdnative.Int, weightScale gdnative.Real)
}
